(()=>{"use strict";function t(t){var n=t((function(t){Error.call(t),t.stack=(new Error).stack}));return n.prototype=Object.create(Error.prototype),n.prototype.constructor=n,n}var n=t((function(t){return function(){t(this),this.name="EmptyError",this.message="no elements in sequence"}})),e=function(t,n){return e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)Object.prototype.hasOwnProperty.call(n,e)&&(t[e]=n[e])},e(t,n)};function r(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}function o(t,n){var e,r,o,i,u={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function c(i){return function(c){return function(i){if(e)throw new TypeError("Generator is already executing.");for(;u;)try{if(e=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return u.label++,{value:i[1],done:!1};case 5:u.label++,r=i[1],i=[0];continue;case 7:i=u.ops.pop(),u.trys.pop();continue;default:if(!((o=(o=u.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){u=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){u.label=i[1];break}if(6===i[0]&&u.label<o[1]){u.label=o[1],o=i;break}if(o&&u.label<o[2]){u.label=o[2],u.ops.push(i);break}o[2]&&u.ops.pop(),u.trys.pop();continue}i=n.call(t,u)}catch(t){i=[6,t],r=0}finally{e=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,c])}}}function i(t){var n="function"==typeof Symbol&&Symbol.iterator,e=n&&t[n],r=0;if(e)return e.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&r>=t.length&&(t=void 0),{value:t&&t[r++],done:!t}}};throw new TypeError(n?"Object is not iterable.":"Symbol.iterator is not defined.")}function u(t,n){var e="function"==typeof Symbol&&t[Symbol.iterator];if(!e)return t;var r,o,i=e.call(t),u=[];try{for(;(void 0===n||n-- >0)&&!(r=i.next()).done;)u.push(r.value)}catch(t){o={error:t}}finally{try{r&&!r.done&&(e=i.return)&&e.call(i)}finally{if(o)throw o.error}}return u}function c(t,n,e){if(e||2===arguments.length)for(var r,o=0,i=n.length;o<i;o++)!r&&o in n||(r||(r=Array.prototype.slice.call(n,0,o)),r[o]=n[o]);return t.concat(r||Array.prototype.slice.call(n))}function a(t){return this instanceof a?(this.v=t,this):new a(t)}function s(t,n,e){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var r,o=e.apply(t,n||[]),i=[];return r={},u("next"),u("throw"),u("return"),r[Symbol.asyncIterator]=function(){return this},r;function u(t){o[t]&&(r[t]=function(n){return new Promise((function(e,r){i.push([t,n,e,r])>1||c(t,n)}))})}function c(t,n){try{(e=o[t](n)).value instanceof a?Promise.resolve(e.value.v).then(s,l):f(i[0][2],e)}catch(t){f(i[0][3],t)}var e}function s(t){c("next",t)}function l(t){c("throw",t)}function f(t,n){t(n),i.shift(),i.length&&c(i[0][0],i[0][1])}}function l(t){return"function"==typeof t}Object.create,Object.create;var f=t((function(t){return function(n){t(this),this.message=n?n.length+" errors occurred during unsubscription:\n"+n.map((function(t,n){return n+1+") "+t.toString()})).join("\n  "):"",this.name="UnsubscriptionError",this.errors=n}}));function p(t,n){if(t){var e=t.indexOf(n);0<=e&&t.splice(e,1)}}var h=function(){function t(t){this.initialTeardown=t,this.closed=!1,this._parentage=null,this._teardowns=null}return t.prototype.unsubscribe=function(){var t,n,e,r,o;if(!this.closed){this.closed=!0;var a=this._parentage;if(a)if(this._parentage=null,Array.isArray(a))try{for(var s=i(a),p=s.next();!p.done;p=s.next())p.value.remove(this)}catch(n){t={error:n}}finally{try{p&&!p.done&&(n=s.return)&&n.call(s)}finally{if(t)throw t.error}}else a.remove(this);var h=this.initialTeardown;if(l(h))try{h()}catch(t){o=t instanceof f?t.errors:[t]}var y=this._teardowns;if(y){this._teardowns=null;try{for(var v=i(y),b=v.next();!b.done;b=v.next()){var m=b.value;try{d(m)}catch(t){o=null!=o?o:[],t instanceof f?o=c(c([],u(o)),u(t.errors)):o.push(t)}}}catch(t){e={error:t}}finally{try{b&&!b.done&&(r=v.return)&&r.call(v)}finally{if(e)throw e.error}}}if(o)throw new f(o)}},t.prototype.add=function(n){var e;if(n&&n!==this)if(this.closed)d(n);else{if(n instanceof t){if(n.closed||n._hasParent(this))return;n._addParent(this)}(this._teardowns=null!==(e=this._teardowns)&&void 0!==e?e:[]).push(n)}},t.prototype._hasParent=function(t){var n=this._parentage;return n===t||Array.isArray(n)&&n.includes(t)},t.prototype._addParent=function(t){var n=this._parentage;this._parentage=Array.isArray(n)?(n.push(t),n):n?[n,t]:t},t.prototype._removeParent=function(t){var n=this._parentage;n===t?this._parentage=null:Array.isArray(n)&&p(n,t)},t.prototype.remove=function(n){var e=this._teardowns;e&&p(e,n),n instanceof t&&n._removeParent(this)},t.EMPTY=((n=new t).closed=!0,n),t;var n}();function y(t){return t instanceof h||t&&"closed"in t&&l(t.remove)&&l(t.add)&&l(t.unsubscribe)}function d(t){l(t)?t():t.unsubscribe()}h.EMPTY;var v=null,b=null,m=void 0,w=!1,x=!1,g={setTimeout:function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var e=g.delegate;return((null==e?void 0:e.setTimeout)||setTimeout).apply(void 0,c([],u(t)))},clearTimeout:function(t){var n=g.delegate;return((null==n?void 0:n.clearTimeout)||clearTimeout)(t)},delegate:void 0};function _(t){g.setTimeout((function(){if(!v)throw t;v(t)}))}function S(){}var T=E("C",void 0,void 0);function E(t,n,e){return{kind:t,value:n,error:e}}var A=null,P=function(t){function n(n){var e=t.call(this)||this;return e.isStopped=!1,n?(e.destination=n,y(n)&&n.add(e)):e.destination=C,e}return r(n,t),n.create=function(t,n,e){return new q(t,n,e)},n.prototype.next=function(t){this.isStopped?L(function(t){return E("N",t,void 0)}(t),this):this._next(t)},n.prototype.error=function(t){this.isStopped?L(E("E",void 0,t),this):(this.isStopped=!0,this._error(t))},n.prototype.complete=function(){this.isStopped?L(T,this):(this.isStopped=!0,this._complete())},n.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,t.prototype.unsubscribe.call(this),this.destination=null)},n.prototype._next=function(t){this.destination.next(t)},n.prototype._error=function(t){try{this.destination.error(t)}finally{this.unsubscribe()}},n.prototype._complete=function(){try{this.destination.complete()}finally{this.unsubscribe()}},n}(h),O=Function.prototype.bind;function k(t,n){return O.call(t,n)}var j=function(){function t(t){this.partialObserver=t}return t.prototype.next=function(t){var n=this.partialObserver;if(n.next)try{n.next(t)}catch(t){I(t)}},t.prototype.error=function(t){var n=this.partialObserver;if(n.error)try{n.error(t)}catch(t){I(t)}else I(t)},t.prototype.complete=function(){var t=this.partialObserver;if(t.complete)try{t.complete()}catch(t){I(t)}},t}(),q=function(t){function n(n,e,r){var o,i,u=t.call(this)||this;return l(n)||!n?o={next:null!=n?n:void 0,error:null!=e?e:void 0,complete:null!=r?r:void 0}:u&&x?((i=Object.create(n)).unsubscribe=function(){return u.unsubscribe()},o={next:n.next&&k(n.next,i),error:n.error&&k(n.error,i),complete:n.complete&&k(n.complete,i)}):o=n,u.destination=new j(o),u}return r(n,t),n}(P);function I(t){var n;w?(n=t,w&&A&&(A.errorThrown=!0,A.error=n)):_(t)}function L(t,n){var e=b;e&&g.setTimeout((function(){return e(t,n)}))}var C={closed:!0,next:S,error:function(t){throw t},complete:S};function N(t,e){var r="object"==typeof e;return new Promise((function(o,i){var u=new q({next:function(t){o(t),u.unsubscribe()},error:i,complete:function(){r?o(e.defaultValue):i(new n)}});t.subscribe(u)}))}var B=function(t){return t&&"number"==typeof t.length&&"function"!=typeof t},U="function"==typeof Symbol&&Symbol.observable||"@@observable";function H(t){return t}function M(t){return 0===t.length?H:1===t.length?t[0]:function(n){return t.reduce((function(t,n){return n(t)}),n)}}var Y=function(){function t(t){t&&(this._subscribe=t)}return t.prototype.lift=function(n){var e=new t;return e.source=this,e.operator=n,e},t.prototype.subscribe=function(t,n,e){var r,o=this,i=(r=t)&&r instanceof P||function(t){return t&&l(t.next)&&l(t.error)&&l(t.complete)}(r)&&y(r)?t:new q(t,n,e);return function(t){if(w){var n=!A;if(n&&(A={errorThrown:!1,error:null}),t(),n){var e=A,r=e.errorThrown,o=e.error;if(A=null,r)throw o}}else t()}((function(){var t=o,n=t.operator,e=t.source;i.add(n?n.call(i,e):e?o._subscribe(i):o._trySubscribe(i))})),i},t.prototype._trySubscribe=function(t){try{return this._subscribe(t)}catch(n){t.error(n)}},t.prototype.forEach=function(t,n){var e=this;return new(n=F(n))((function(n,r){var o=new q({next:function(n){try{t(n)}catch(t){r(t),o.unsubscribe()}},error:r,complete:n});e.subscribe(o)}))},t.prototype._subscribe=function(t){var n;return null===(n=this.source)||void 0===n?void 0:n.subscribe(t)},t.prototype[U]=function(){return this},t.prototype.pipe=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return M(t)(this)},t.prototype.toPromise=function(t){var n=this;return new(t=F(t))((function(t,e){var r;n.subscribe((function(t){return r=t}),(function(t){return e(t)}),(function(){return t(r)}))}))},t.create=function(n){return new t(n)},t}();function F(t){var n;return null!==(n=null!=t?t:m)&&void 0!==n?n:Promise}var G="function"==typeof Symbol&&Symbol.iterator?Symbol.iterator:"@@iterator";function Q(t){if(t instanceof Y)return t;if(null!=t){if(function(t){return l(t[U])}(t))return c=t,new Y((function(t){var n=c[U]();if(l(n.subscribe))return n.subscribe(t);throw new TypeError("Provided object does not correctly implement Symbol.observable")}));if(B(t))return u=t,new Y((function(t){for(var n=0;n<u.length&&!t.closed;n++)t.next(u[n]);t.complete()}));if(l(null==(r=t)?void 0:r.then))return e=t,new Y((function(t){e.then((function(n){t.closed||(t.next(n),t.complete())}),(function(n){return t.error(n)})).then(null,_)}));if(function(t){return Symbol.asyncIterator&&l(null==t?void 0:t[Symbol.asyncIterator])}(t))return R(t);if(function(t){return l(null==t?void 0:t[G])}(t))return n=t,new Y((function(t){var e,r;try{for(var o=i(n),u=o.next();!u.done;u=o.next()){var c=u.value;if(t.next(c),t.closed)return}}catch(t){e={error:t}}finally{try{u&&!u.done&&(r=o.return)&&r.call(o)}finally{if(e)throw e.error}}t.complete()}));if(function(t){return l(null==t?void 0:t.getReader)}(t))return R(function(t){return s(this,arguments,(function(){var n,e,r;return o(this,(function(o){switch(o.label){case 0:n=t.getReader(),o.label=1;case 1:o.trys.push([1,,9,10]),o.label=2;case 2:return[4,a(n.read())];case 3:return e=o.sent(),r=e.value,e.done?[4,a(void 0)]:[3,5];case 4:return[2,o.sent()];case 5:return[4,a(r)];case 6:return[4,o.sent()];case 7:return o.sent(),[3,2];case 8:return[3,10];case 9:return n.releaseLock(),[7];case 10:return[2]}}))}))}(t))}var n,e,r,u,c;throw function(t){return new TypeError("You provided "+(null!==t&&"object"==typeof t?"an invalid object":"'"+t+"'")+" where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.")}(t)}function R(t){return new Y((function(n){(function(t,n){var e,r,u,c,a,s,l,f;return a=this,s=void 0,f=function(){var a,s;return o(this,(function(o){switch(o.label){case 0:o.trys.push([0,5,6,11]),e=function(t){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var n,e=t[Symbol.asyncIterator];return e?e.call(t):(t=i(t),n={},r("next"),r("throw"),r("return"),n[Symbol.asyncIterator]=function(){return this},n);function r(e){n[e]=t[e]&&function(n){return new Promise((function(r,o){!function(t,n,e,r){Promise.resolve(r).then((function(n){t({value:n,done:e})}),n)}(r,o,(n=t[e](n)).done,n.value)}))}}}(t),o.label=1;case 1:return[4,e.next()];case 2:if((r=o.sent()).done)return[3,4];if(a=r.value,n.next(a),n.closed)return[2];o.label=3;case 3:return[3,1];case 4:return[3,11];case 5:return s=o.sent(),u={error:s},[3,11];case 6:return o.trys.push([6,,9,10]),r&&!r.done&&(c=e.return)?[4,c.call(e)]:[3,8];case 7:o.sent(),o.label=8;case 8:return[3,10];case 9:if(u)throw u.error;return[7];case 10:return[7];case 11:return n.complete(),[2]}}))},new((l=void 0)||(l=Promise))((function(t,n){function e(t){try{o(f.next(t))}catch(t){n(t)}}function r(t){try{o(f.throw(t))}catch(t){n(t)}}function o(n){var o;n.done?t(n.value):(o=n.value,o instanceof l?o:new l((function(t){t(o)}))).then(e,r)}o((f=f.apply(a,s||[])).next())}))})(t,n).catch((function(t){return n.error(t)}))}))}function z(t){return function(n){if(function(t){return l(null==t?void 0:t.lift)}(n))return n.lift((function(n){try{return t(n,this)}catch(t){this.error(t)}}));throw new TypeError("Unable to lift unknown Observable type")}}function D(t,n,e,r,o){return new V(t,n,e,r,o)}var V=function(t){function n(n,e,r,o,i,u){var c=t.call(this,n)||this;return c.onFinalize=i,c.shouldUnsubscribe=u,c._next=e?function(t){try{e(t)}catch(t){n.error(t)}}:t.prototype._next,c._error=o?function(t){try{o(t)}catch(t){n.error(t)}finally{this.unsubscribe()}}:t.prototype._error,c._complete=r?function(){try{r()}catch(t){n.error(t)}finally{this.unsubscribe()}}:t.prototype._complete,c}return r(n,t),n.prototype.unsubscribe=function(){var n;if(!this.shouldUnsubscribe||this.shouldUnsubscribe()){var e=this.closed;t.prototype.unsubscribe.call(this),!e&&(null===(n=this.onFinalize)||void 0===n||n.call(this))}},n}(P);function W(t,n){return z((function(e,r){var o=0;e.subscribe(D(r,(function(e){r.next(t.call(n,e,o++))})))}))}function J(t,n,e){return void 0===e&&(e=1/0),l(n)?J((function(e,r){return W((function(t,o){return n(e,t,r,o)}))(Q(t(e,r)))}),e):("number"==typeof n&&(e=n),z((function(n,r){return function(t,n,e,r,o,i,u,c){var a=[],s=0,l=0,f=!1,p=function(){!f||a.length||s||n.complete()},h=function(t){return s<r?y(t):a.push(t)},y=function(t){s++;var o=!1;Q(e(t,l++)).subscribe(D(n,(function(t){n.next(t)}),(function(){o=!0}),void 0,(function(){if(o)try{s--;for(var t=function(){var t=a.shift();y(t)};a.length&&s<r;)t();p()}catch(t){n.error(t)}})))};return t.subscribe(D(n,h,(function(){f=!0,p()}))),function(){}}(n,r,t,e)})))}var K=Array.isArray;var X=["addListener","removeListener"],Z=["addEventListener","removeEventListener"],$=["on","off"];function tt(t,n,e,r){if(l(e)&&(r=e,e=void 0),r)return tt(t,n,e).pipe((o=r,W((function(t){return function(t,n){return K(n)?t.apply(void 0,c([],u(n))):t(n)}(o,t)}))));var o,i=u(function(t){return l(t.addEventListener)&&l(t.removeEventListener)}(t)?Z.map((function(r){return function(o){return t[r](n,o,e)}})):function(t){return l(t.addListener)&&l(t.removeListener)}(t)?X.map(nt(t,n)):function(t){return l(t.on)&&l(t.off)}(t)?$.map(nt(t,n)):[],2),a=i[0],s=i[1];if(!a&&B(t))return J((function(t){return tt(t,n,e)}))(Q(t));if(!a)throw new TypeError("Invalid event target");return new Y((function(t){var n=function(){for(var n=[],e=0;e<arguments.length;e++)n[e]=arguments[e];return t.next(1<n.length?n:n[0])};return a(n),function(){return s(n)}}))}function nt(t,n){return function(e){return function(r){return t[e](n,r)}}}function et(t,n){return z((function(e,r){var o=0;e.subscribe(D(r,(function(e){return t.call(n,e,o++)&&r.next(e)})))}))}var rt=new Y((function(t){return t.complete()}));function ot(t){return t<=0?function(){return rt}:z((function(n,e){var r=0;n.subscribe(D(e,(function(n){++r<=t&&(e.next(n),t<=r&&e.complete())})))}))}function it(t){return z((function(n,e){var r=!1;n.subscribe(D(e,(function(t){r=!0,e.next(t)}),(function(){r||e.next(t),e.complete()})))}))}function ut(t){return void 0===t&&(t=ct),z((function(n,e){var r=!1;n.subscribe(D(e,(function(t){r=!0,e.next(t)}),(function(){return r?e.complete():e.error(t())})))}))}function ct(){return new n}var at=function(){function t(){this.cardsBody=document.querySelector(".cards"),this.cardItemTemplate=document.querySelector("#cardItemTemplate"),this.helloTemplate=document.querySelector("#helloTemplate")}return t.prototype.clear=function(){this.cardsBody.innerHTML=""},t.prototype.askName=function(){var t=this.cardItemTemplate.content.cloneNode(!0),e=Array.from(t.querySelectorAll("p")),r=e[0],o=e[1],i=e[2];r.textContent="Question 1: What is your name?";var u=document.createElement("input");return u.type="submit",u.value="Go",i.appendChild(u),this.cardsBody.appendChild(t),tt(i.querySelector("input"),"click").pipe(function(t,e){var r=arguments.length>=2;return function(o){return o.pipe(t?et((function(n,e){return t(n,e,o)})):H,ot(1),r?it(e):ut((function(){return new n})))}}(),W((function(){var t;return(null===(t=o.querySelector("input"))||void 0===t?void 0:t.value)||"unknown"})))},t.prototype.addHello=function(t){var n=this.helloTemplate.content.cloneNode(!0);n.querySelector("p").innerText="Hello, ".concat(t,"!"),this.cardsBody.append(n)},t.prototype.showNewQuestions=function(t){for(var n=new Array(45),e=0;e<n.length;e++){var r=this.cardItemTemplate.content.cloneNode(!0),o=Array.from(r.querySelectorAll("p"))[0],i=t[e],u=i[0],c=i[1],a=i[2];o.textContent="".concat(u," ").concat(c," ").concat(a),this.cardsBody.appendChild(r)}},t}(),st=function(){function t(){}return Object.defineProperty(t.prototype,"name",{get:function(){if(!this._name)throw new Error("name is not set");return this._name},set:function(t){this._name=t},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"questions",{get:function(){if(!this._questions)throw new Error("questions are not set");return this._questions},set:function(t){this._questions=t},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"gameAnswers",{get:function(){if(!this._gameAnswers)throw new Error("gameAnswers are not set");return this._gameAnswers},set:function(t){this._gameAnswers=t},enumerable:!1,configurable:!0}),t}();"content"in document.createElement("template")?document.addEventListener("DOMContentLoaded",(function(){return t=this,n=void 0,r=function(){var t,n,e,r;return function(t,n){var e,r,o,i,u={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function c(i){return function(c){return function(i){if(e)throw new TypeError("Generator is already executing.");for(;u;)try{if(e=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return u.label++,{value:i[1],done:!1};case 5:u.label++,r=i[1],i=[0];continue;case 7:i=u.ops.pop(),u.trys.pop();continue;default:if(!((o=(o=u.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){u=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){u.label=i[1];break}if(6===i[0]&&u.label<o[1]){u.label=o[1],o=i;break}if(o&&u.label<o[2]){u.label=o[2],u.ops.push(i);break}o[2]&&u.ops.pop(),u.trys.pop();continue}i=n.call(t,u)}catch(t){i=[6,t],r=0}finally{e=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,c])}}}(this,(function(o){switch(o.label){case 0:return(t=new at).clear(),n=new st,e=n,[4,N(t.askName())];case 1:return e.name=o.sent(),t.clear(),t.addHello(n.name),r=[[40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40],[[5,"*",8],[5,"/",8],[5,"+",8],[5,"-",8],[5,"*",9],[5,"*",8],[5,"/",8],[5,"+",8],[5,"-",8],[5,"*",9],[5,"*",8],[5,"/",8],[5,"+",8],[5,"-",8],[5,"*",9],[5,"*",8],[5,"/",8],[5,"+",8],[5,"-",8],[5,"*",9],[5,"*",8],[5,"/",8],[5,"+",8],[5,"-",8],[5,"*",9],[5,"*",8],[5,"/",8],[5,"+",8],[5,"-",8],[5,"*",9],[5,"*",8],[5,"/",8],[5,"+",8],[5,"-",8],[5,"*",9],[5,"*",8],[5,"/",8],[5,"+",8],[5,"-",8],[5,"*",9],[5,"*",8],[5,"/",8],[5,"+",8],[5,"-",8],[5,"*",9]]],n.gameAnswers=r[0],n.questions=r[1],t.showNewQuestions(n.questions),[2]}}))},new((e=void 0)||(e=Promise))((function(o,i){function u(t){try{a(r.next(t))}catch(t){i(t)}}function c(t){try{a(r.throw(t))}catch(t){i(t)}}function a(t){var n;t.done?o(t.value):(n=t.value,n instanceof e?n:new e((function(t){t(n)}))).then(u,c)}a((r=r.apply(t,n||[])).next())}));var t,n,e,r})):window.alert("Sorry, this browser is not supported.")})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,